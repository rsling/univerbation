% !Rnw root = ../nvuniverbation.Rnw
<<setupexperiment, cache=FALSE, include=FALSE, results='asis'>>=
opts_knit$set(self.contained=FALSE)
@

\section{Elicited production of noun-verb units in written language}
\label{sec:elicitedproductionofnounverbunitsinwrittenlanguage}

<<experimentmosaic, results="asis", fig.showtext=TRUE, fig.pos="htbp", fig.height=4, fig.cap="Mosaic plot of the responses in the production experiment (vertical right) grouped by the morphosyntactic context (horizontal) and the binned N+V unit's attraction strength calculated from the corpus (vertical left)">>=
exp.cases$Context <- factor(exp.cases$Context, levels = c("Infinitive", "Participle", "Clitic", "Progressive"))
exp.cases$Attraction <- revalue(exp.cases$Attraction, c("Hi"="High", "Lo"="Low"))
exp.cases$Univerbation <- revalue(exp.cases$Univerbation, c("1"="Yes", "0"="No"))


exp.table <- structable(Univerbation ~ Attraction + Context, data = exp.cases)
exp.table <- as.table(exp.table)
lab <-ifelse(exp.table <= 5, NA, exp.table)

exp.mosaic <- mosaic(exp.table, pop = F, direction = c("h", "v", "h"),
                     labeling = T, colorize = T,
                     shade = T,
                     gp = gpar(fill=c("lightyellow", "lightgreen")),
                     labeling_args=my.largs
                     )
mosaic.array <- as.table(exp.table)
labeling_cells(text = lab)(mosaic.array)
@


<<experimentglmm, results="asis">>=
exp.cases$Context <- factor(exp.cases$Context, levels = c("Infinitive", "Participle", "Progressive", "Clitic"))

experiment.glmm <- glmer(Univerbation ~ AttractionNum + Context + (1 | Participant),
                         data = exp.cases, family = binomial(link = "logit"),
                         na.action = na.fail,
                         control=glmerControl(optimizer="nloptwrap2", optCtrl=list(maxfun=2e5)))
experiment.glmm.r2 <- r.squaredGLMM(experiment.glmm)
experiment.fixefs <- fixef(experiment.glmm)
experiment.confints <- confint(experiment.glmm)
experiment.glmm.r2 <- r.squaredGLMM(experiment.glmm)
@


<<experimentglmmreport, results="asis">>=

# Build the table.
experiment.ct <- nice.float(cbind(experiment.fixefs, experiment.confints[2:6,]))
colnames(experiment.ct) <- c("Estimate", "CI low", "CI high")
ranef.participant <- format.ranef(experiment.glmm, "Participant")
experiment.r2.txt <- paste0("Nakagawa \\& Schielzeth's \\CM{R^2_m=", nice.float(experiment.glmm.r2[1,1]), "} and \\CM{R^2_c=", nice.float(experiment.glmm.r2[1,2]), "}. ")
exp.ranef.txt <- paste0("Random effect for participant: \\CM{Intercept=", nice.float(ranef.participant$Intercept), "}, \\CM{sd=", nice.float(ranef.participant$sd),
                    "}")
experiment.ctx <- xtable(experiment.ct,
                         caption = paste0("Coefficient table for the GLMM  modelling the experiment data with 95\\% confidence intervals.", experiment.r2.txt, exp.ranef.txt),
                         label = "tab:experimentglmm")


# Print the table.
print(experiment.ctx,
      include.rownames=T,
      floating = T,
      table.placement = 'h!',
      booktabs = T,
      scalebox = 1,
      sanitize.text.function = function(x){x},
)
@


<<experimentfx, results="asis", fig.height=4, fig.showtext=TRUE, fig.pos="htbp", fig.height=4, fig.cap="Effect plots for the regressor encoding the morphosyntactic context and the attraction strength as calculated from the corpus in the GLMM modelling the experimental data">>=

experiment.glmm.fx.context.fx <- effect("Context", experiment.glmm, KR = T)
experiment.glmm.fx.context.fx$variables$Context$levels <- c("Inf.", "Part.", "Prog.", "Clitic")
levels(experiment.glmm.fx.context.fx$x$Context) <-  c("Clitic", "Inf.", "Part.", "Prog.")
experiment.glmm.fx.context <- plot(experiment.glmm.fx.context.fx, rug=F, colors = c("black", "darkorange"),
     main="",
     ylab="Probability of univerbation",
     xlab="Morphosyntactic context"
)
experiment.glmm.fx.attraction <- plot(effect("AttractionNum", experiment.glmm, KR = T), rug=F, colors = c("black", "darkorange"),
     main="",
     ylab="Probability of univerbation",
     xlab="Lexical attraction derived from corpus"
)
grid.arrange(experiment.glmm.fx.context, experiment.glmm.fx.attraction, ncol=2)
@


